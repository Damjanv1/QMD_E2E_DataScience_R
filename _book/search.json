[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "End To End Data Science With R",
    "section": "",
    "text": "Preface\nWelcome to the first edition of “End to End Data Science with R”!\nAfter reading this book, you’ll have the tools to tackle a wide variety of data science challenges using the following skills:",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "End To End Data Science With R",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nThis book isn’t just the product of the listed authors but is the result of many conversations (in person and online) that we’ve had with many people in the R community. We’re incredibly grateful for all the conversations we’ve had with y’all; Thank You So Much!",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "How this book is organized\nBelow is a list of items we are going to cover in this book: 1. Introduction to Data Science and R 2. Data Exploration and Visualization 3. Supervised Learning 4. Unsupervised Learning 5. Boosting and Random Forest 6. Natural Language Processing 7. Image Processing/Computer Vision 8. Reinforcement Learning 9. Big Data & Cloud Computing",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#why-learning-data-science",
    "href": "intro.html#why-learning-data-science",
    "title": "Introduction",
    "section": "Why Learning data science?",
    "text": "Why Learning data science?\nAs more and more businesses move towards digitalization, there is a growing demand for professionals who can analyze and make sense of the vast amounts of data that are being generated. This has created a significant shortage of skilled Data Scientists, making it a highly sought-after and well-compensated profession.\nAnother point is that, Data Science is a highly interdisciplinary field that combines knowledge and techniques from statistics, computer science, and domain-specific areas. This means that learning Data Science can enhance your critical thinking skills, improve your ability to solve complex problems, and provide you with a unique set of skills that are highly valued in the job market.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#the-role-of-r",
    "href": "intro.html#the-role-of-r",
    "title": "Introduction",
    "section": "The Role of R",
    "text": "The Role of R\nR is a programming language that is widely used in the field of Data Science. Its role in Data Science is multifaceted and can be summarized as follows:\n\nData Wrangling: R has a powerful set of libraries that allow you to manipulate and transform data, which is a critical step in any Data Science project.\nStatistical Analysis: R has a rich set of statistical libraries that allow you to perform a wide range of statistical analyses, including hypothesis testing, regression analysis, and time series analysis.\nData Visualization: R has an extensive set of libraries for creating high-quality data visualizations, such as plots, charts, and graphs, that enable you to communicate insights effectively.\nMachine Learning: R has a comprehensive set of libraries for building and deploying machine learning models, such as decision trees, random forests, and neural networks.\nReproducibility: R provides a framework for creating reproducible data analyses, which is essential for collaborating with others and ensuring that your work can be verified and replicated.\n\nOverall, R plays a critical role in the Data Science process by providing a powerful and flexible toolset for manipulating, analyzing, and visualizing data, building and deploying machine learning models, and ensuring reproducibility.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction to Data Science and R",
    "section": "",
    "text": "In this first part of the book, our focus will be on the the three following chapters:\n\nIn 1  Understanding Data Science As a Career we start with an introduction to the world of Data Science and its importance in the our current world.\nIn 2  Understanding R Applications in Data Science we unpack the role of R in the field of Data Science.\nIn 3  R Objects And Variables we discuss some important data concepts that are frequently used in this course.",
    "crumbs": [
      "Introduction to Data Science and R"
    ]
  },
  {
    "objectID": "understanding-ds.html",
    "href": "understanding-ds.html",
    "title": "1  Understanding Data Science As a Career",
    "section": "",
    "text": "1.1 State of Data Science\nData Science is an interdisciplinary field that involves using scientific methods, processes, algorithms, and systems to extract insights and knowledge from structured and unstructured data. It involves collecting and processing large amounts of data, analyzing it to identify patterns and trends, and using those insights to make informed business decisions. A Data Scientist is a professional who has expertise in data analysis, machine learning, statistics, programming, and domain knowledge. They use various statistical and computational techniques to analyse large, complex datasets and derive valuable insights that help organisations make informed decisions. It can be used to optimize operations, improve customer experiences, and develop new products and services. By leveraging Data Science techniques, businesses can gain a competitive edge by making more informed decisions and quickly adapting to changing market conditions.\nData Science involves several stages, including data collection, data cleaning, data preprocessing, exploratory data analysis, modelling, and evaluation. Data Scientists work with various tools and technologies such as Python, R, SQL, Hadoop, Spark, and Tableau, to name a few.",
    "crumbs": [
      "Introduction to Data Science and R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Understanding Data Science As a Career</span>"
    ]
  },
  {
    "objectID": "understanding-ds.html#difference-among-popular-data-careers",
    "href": "understanding-ds.html#difference-among-popular-data-careers",
    "title": "1  Understanding Data Science As a Career",
    "section": "\n1.2 Difference among popular data careers?",
    "text": "1.2 Difference among popular data careers?\nWhile Data Science is a broad field, there are several roles that one can pursue within it. Here are some of the key differences between Data Engineer, Data Analyst, BI Analyst, and Statistician:\n\n\n\n\n\n\n\n\nCareer\nJob Responsibilities\nRequired Skills\nTools/Technologies\n\n\n\nData Scientist\nDevelop and apply statistical or machine learning models to solve business problems; collect, clean, and analyze large datasets; communicate insights to stakeholders\nStrong analytical and problem-solving skills; knowledge of statistics, machine learning, and programming languages (Python, R, SQL); familiarity with data visualization techniques\nPython, R, SQL, Hadoop, Spark, Tableau, SAS\n\n\nData Engineer\nBuild and maintain data pipelines and infrastructure to support data analysis and machine learning; work with large datasets and distributed systems\nStrong programming skills; expertise in databases, data warehousing, and ETL (extract, transform, load) processes; knowledge of cloud computing\nHadoop, Spark, SQL, NoSQL databases, AWS, Azure\n\n\nData Analyst\nCollect and analyze data to identify trends, patterns, and insights; communicate findings to stakeholders\nStrong analytical and problem-solving skills; knowledge of statistics and data visualization techniques; proficiency in Excel\nExcel, SQL, Tableau, Power BI\n\n\nBI Analyst\nDesign and develop business intelligence solutions to support decision-making processes; gather and analyze data from multiple sources; create dashboards and reports\nStrong analytical and problem-solving skills; expertise in databases and data modeling; knowledge of data visualization techniques\nTableau, Power BI, SQL, Excel\n\n\nStatistician\nDesign and conduct experiments to collect and analyze data; develop statistical models to explain and predict phenomena; communicate findings to stakeholders\nStrong analytical and problem-solving skills; expertise in statistical theory and methods; knowledge of programming languages (Python, R, SAS)\nPython, R, SAS, SPSS\n\n\n\nWhile there is some overlap between these roles, each one requires a specific set of skills and expertise. Data Science as a field offers a wide range of career opportunities, and individuals can choose a role that aligns with their interests and strengths.",
    "crumbs": [
      "Introduction to Data Science and R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Understanding Data Science As a Career</span>"
    ]
  },
  {
    "objectID": "understanding-ds.html#why-learning-data-science",
    "href": "understanding-ds.html#why-learning-data-science",
    "title": "1  Understanding Data Science As a Career",
    "section": "\n1.3 Why Learning data science?",
    "text": "1.3 Why Learning data science?\nAs more and more businesses move towards digitalization, there is a growing demand for professionals who can analyze and make sense of the vast amounts of data that are being generated. This has created a significant shortage of skilled Data Scientists, making it a highly sought-after and well-compensated profession.\nAnother point is that,Data Science is a highly interdisciplinary field that combines knowledge and techniques from statistics, computer science, and domain-specific areas. This means that learning Data Science can enhance your critical thinking skills, improve your ability to solve complex problems, and provide you with a unique set of skills that are highly valued in the job market.",
    "crumbs": [
      "Introduction to Data Science and R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Understanding Data Science As a Career</span>"
    ]
  },
  {
    "objectID": "understanding-r-applications.html",
    "href": "understanding-r-applications.html",
    "title": "2  Understanding R Applications in Data Science",
    "section": "",
    "text": "2.1 The Role of R\nR is a programming language that is widely used in the field of Data Science. Its role in Data Science is multifaceted and can be summarized as follows:",
    "crumbs": [
      "Introduction to Data Science and R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding R Applications in Data Science</span>"
    ]
  },
  {
    "objectID": "understanding-r-applications.html#the-role-of-r",
    "href": "understanding-r-applications.html#the-role-of-r",
    "title": "2  Understanding R Applications in Data Science",
    "section": "",
    "text": "Data Wrangling: R has a powerful set of libraries that allow you to manipulate and transform data, which is a critical step in any Data Science project.\nStatistical Analysis: R has a rich set of statistical libraries that allow you to perform a wide range of statistical analyses, including hypothesis testing, regression analysis, and time series analysis.\nData Visualization: R has an extensive set of libraries for creating high-quality data visualizations, such as plots, charts, and graphs, that enable you to communicate insights effectively.\nMachine Learning: R has a comprehensive set of libraries for building and deploying machine learning models, such as decision trees, random forests, and neural networks.\nReproducibility: R provides a framework for creating reproducible data analyses, which is essential for collaborating with others and ensuring that your work can be verified and replicated.\n\n\n2.1.1 R v.s. Python\n\n\n\n\n\n\n\nFigure 2.1: R vs. Python\n\n\n\n\nYou may wondering why we choose R over another popular language - Python, in this course. The short answer is the choice ultimately depends on the specific needs of the data scientist and the project at hand.\nAsk yourself: what kind of data scientist you want to become? R is hands down the best option when you focus on statistics and probabilities. It has a large community of statisticians that can answer your questions. But, if you want to develop applications that process enormous amounts of data, Python is your best option. It has a more extensive ecosystem of developers, and it’s easier to find people willing to collaborate with you.\nTechnical Differences 1. Syntax: R has a syntax that is tailored for statistical analysis and modelling, with many built-in functions and operators specifically designed for this purpose. Python, on the other hand, has a more general-purpose syntax that can be used for a wide range of tasks beyond statistical analysis.\n\nLibraries and Packages: Both R and Python have extensive libraries and packages for data science, but they differ in their focus and scope. R has a strong emphasis on statistical modelling and analysis, with packages like ggplot2, dplyr, and tidyr. Python, on the other hand, has a broader range of applications, including web development, scientific computing, and machine learning, with packages like NumPy, Pandas, and Scikit-learn.\nCommunity: Both R and Python have large and active communities, but they differ in their backgrounds and focus. R has historically been used more by statisticians and data analysts, while Python has been more popular among software engineers and developers.\nLearning Curve: R is generally considered to have a steeper learning curve than Python, especially for those who are new to programming. However, once you become familiar with R’s syntax and packages, it can be a very powerful and efficient tool for statistical analysis.\nVisualisation: R has a strong focus on Visualisation, with packages like ggplot2 and lattice that make it easy to create high-quality plots and charts. Python also has Visualisation packages like Matplotlib and Seaborn, but they may require more customisation and tweaking to get the desired output.",
    "crumbs": [
      "Introduction to Data Science and R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding R Applications in Data Science</span>"
    ]
  },
  {
    "objectID": "r-objects-and-variables.html",
    "href": "r-objects-and-variables.html",
    "title": "3  R Objects And Variables",
    "section": "",
    "text": "3.1 Basic R Objects\nIn this section, we will explore the fundamental building blocks of R programming, starting with the basic R objects. These objects serve as the foundation for data manipulation and analysis in R. We will delve into five key types of R objects: vectors, matrices, lists, data frames, and functions. Understanding these essential data structures is crucial for anyone looking to harness the power of R for data science, statistics, and programming tasks.",
    "crumbs": [
      "Introduction to Data Science and R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R Objects And Variables</span>"
    ]
  },
  {
    "objectID": "r-objects-and-variables.html#basic-r-objects",
    "href": "r-objects-and-variables.html#basic-r-objects",
    "title": "3  R Objects And Variables",
    "section": "",
    "text": "3.1.1 Vector\nSequence of data elements of the same type. Each element of the vector is also called a component, member, or value. Vectors are created in R using the c() function, which stands for combine, and coerces all of its arguments into a single type. The coercion will happen from simpler types into more complex types. That is, if we create a vector which contains logicals, numerics, and characters, as the following example shows, our resulting vector will only contain characters, which are the more complex of the three types. If we create a vector that contains logicals and numerics, our resulting vector will be numeric, again because it’s the more complex type.\n\nmy_vector &lt;- c(TRUE, FALSE, -1, 0, 1, \"A\", \"B\", NA, NULL, NaN, Inf)\nmy_vector\n#&gt;  [1] \"TRUE\"  \"FALSE\" \"-1\"    \"0\"     \"1\"     \"A\"     \"B\"     NA      \"NaN\"  \n#&gt; [10] \"Inf\"\n\n## Find the first element of `my_vector`\npaste(\"the first element of `my_vector` is:\", my_vector[1])\n#&gt; [1] \"the first element of `my_vector` is: TRUE\"\n\n## Find the 5th element of `my_vector`\npaste(\"the 5th element of `my_vector` is:\", my_vector[5])\n#&gt; [1] \"the 5th element of `my_vector` is: 1\"\n\n## Find the firt 3 elements\npaste(\"the firt 3 elements of `my_vector` are:\", my_vector[1:3])\n#&gt; [1] \"the firt 3 elements of `my_vector` are: TRUE\" \n#&gt; [2] \"the firt 3 elements of `my_vector` are: FALSE\"\n#&gt; [3] \"the firt 3 elements of `my_vector` are: -1\"\n\n\n3.1.2 Matrix\nMatrices are commonly used in mathematics and statistics, and much of R’s power comes from the various operations you can perform with them. In R, a matrix is a vector with two additional attributes, the number of rows and the number of columns. And, since matrices are vectors, they are constrained to a single data type.\nYou can use the matrix function to create matrices. You may pass it a vector of values, as well as the number of rows and columns the matrix should have. If you specify the vector of values and one of the dimensions, the other one will be calculated for you automatically to be the lowest number that makes sense for the vector you passed. However, you may specify both of them simultaneously if you prefer, which may produce different behavior depending on the vector you passed, as can be seen in the next example.\nBy default, matrices are constructed column-wise, meaning that the entries can be thought of as starting in the upper-left corner and running down the columns. However, if you prefer to construct it row-wise, you can send the byrow = TRUE parameter.\n\n# Creating a matrix\nmy_mat &lt;- matrix(1:6, nrow = 2, byrow = TRUE)\nmy_mat\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    2    3\n#&gt; [2,]    4    5    6\n# Find the element in row 1 and column 2\nmy_mat[1, 2]\n#&gt; [1] 2\n# Find the elements in row 1 & 2 and column 3\nmy_mat[c(1, 2), 3]\n#&gt; [1] 3 6\n# Find all the elements in column 2\nmy_mat[, 2]\n#&gt; [1] 2 5\n\n\n3.1.3 List\nA list is an ordered collection of objects, like vectors, but lists can actually combine objects of different types. List elements can contain any type of object that exists in R, including data frames and functions. Lists play a central role in R due to their flexibility and they are the basis for data frames, object-oriented programming, and other constructs.\nUsing the function list() helps to explicitly a list. It takes an arbitrary number of arguments, and we can refer to each of those elements by both position, and, in case they are specified, also by names. If you want to reference list elements by names, you can use the $ notation.\n\n# Creating a list\nmy_list &lt;- list(A = 1, B = \"A\", C = TRUE, D = matrix(1:4, nrow = 2), \nZ = function(x) x^2)\n\n# Retrieve the class of each element in the list\nlapply(my_list, class)\n#&gt; $A\n#&gt; [1] \"numeric\"\n#&gt; \n#&gt; $B\n#&gt; [1] \"character\"\n#&gt; \n#&gt; $C\n#&gt; [1] \"logical\"\n#&gt; \n#&gt; $D\n#&gt; [1] \"matrix\" \"array\" \n#&gt; \n#&gt; $Z\n#&gt; [1] \"function\"\n\n# Perform calculation\nmy_list$Z(2)\n#&gt; [1] 4\n\n\n3.1.4 DataFrame\nA data frame is a natural way to represent such heterogeneous tabular data. Every element within a column must be of the same type, but different elements within a row may be of different types, that’s why we say that a data frame is a heterogeneous data structure.\nData frames are usually created by reading in a data using the read.table(), read.csv, or other similar data-loading functions. However, they can also be created explicitly with the data.frame function or they can be coerced from other types of objects such as lists. To create a data frame using the data.frame function, note that we send a vector (which, as we know, must contain elements of a single type) to each of the column names we want our data frame to have, which are A, B, and C in this case.\n\n# Creating a dataframe\nmy_dataframe &lt;- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(25, 30, 35),\n  height = c(1.6, 1.8, 1.7)\n)\n        \n# Accessing a column of the dataframe\nmy_dataframe$name\n#&gt; [1] \"Alice\"   \"Bob\"     \"Charlie\"\n\n\n3.1.5 Function\nA function is an object that takes other objects as inputs, called arguments, and returns an output object. Most functions are in the following form f(arg_1, arg_2, ...), where f is the name of the function and arg_1, arg_2 are the arguments to the function.\nWe can create our own function by using the function constructor and assign it to a symbol. It takes an arbitrary number of named arguments, which can be used within the body of the function.\nIn the following example, we create a function that calculates the Euclidian distance (https://en.wikipedia.org/wiki/Euclidean_distance) between two numeric vectors, and we show how the order of the arguments can be changed if we use named arguments. To realize this effect, we use the print function to make sure we can see in the console what R is receiving as the x and y vectors. When developing your own programs, using the print for debugging your function.\n\n# Creating l2_norm function\nl2_norm &lt;- function(x, y) {\n  print(\"value of x:\")\n  print(x)\n  print(\"value of y:\")\n  print(y)\n  num_diff &lt;- x - y\n  res &lt;- sum(num_diff^2)\n  return(res)\n}\n\na &lt;- 1:3\nb &lt;- 4:6\n\nl2_norm(a, b)\n#&gt; [1] \"value of x:\"\n#&gt; [1] 1 2 3\n#&gt; [1] \"value of y:\"\n#&gt; [1] 4 5 6\n#&gt; [1] 27",
    "crumbs": [
      "Introduction to Data Science and R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R Objects And Variables</span>"
    ]
  },
  {
    "objectID": "r-objects-and-variables.html#type-of-data",
    "href": "r-objects-and-variables.html#type-of-data",
    "title": "3  R Objects And Variables",
    "section": "\n3.2 Type of Data",
    "text": "3.2 Type of Data\nA variable is a characteristic of the population (or sample) being studied, and it is possible to measure, count, and categorize it. The type of variable collected is crucial in the calculation of descriptive statistics and the graphical representation of results as well as in the selection of the statistical methods that will be used to analyze the data.\n\n3.2.1 Continuous Data\nIt refers to a type of numerical data that can take on any value within a specific range or interval. This type of data is measured on a continuous scale, meaning that there are no gaps or interruptions between values. Continuous data is often obtained through measurements or observations that are recorded as real numbers, such as weight, height, time, temperature, and distance.\n\n# Creating a vector of continuous data\nmy_data &lt;- c(1.2, 2.5, 3.1, 4.8, 5.0)\n\n# Calculating mean and standard deviation\nmean(my_data)\n#&gt; [1] 3.32\nsd(my_data)\n#&gt; [1] 1.599062\n\n\n3.2.2 Discrete Data\nUnlike Continuous Data, discrete data is numeric data that which can only take on certain values within a specific range. For example, the number of kids (or trees, or animals) has to be a whole integer.\nSuppose we have a dataset of the number of students in a class, where each value represents a count of a specific number of students:\n\nstudents &lt;- c(20, 25, 22, 18, 20, 23, 21, 19, 22, 20)\n\n# Calculating the frequency of each value\ntable(students)\n#&gt; students\n#&gt; 18 19 20 21 22 23 25 \n#&gt;  1  1  3  1  2  1  1\n# Calculate proportions\nprop.table(students)\n#&gt;  [1] 0.09523810 0.11904762 0.10476190 0.08571429 0.09523810 0.10952381\n#&gt;  [7] 0.10000000 0.09047619 0.10476190 0.09523810\n\n\n3.2.3 Categorical Data\nCategorical data, also known as nominal data, is a type of data that consists of categories or groups that cannot be ordered or ranked. In R, categorical data is typically represented as a factor variable.\nThe factor() function is used to convert the vector to a factor variable. The levels() function is used to view the categories or levels of the factor variable.\n\n# create a vector of categorical data\ngender &lt;- c(\"male\", \"female\", \"male\", \"male\", \"female\", \"female\")\n\n# convert the vector to a factor\ngender_factor &lt;- factor(gender)\n\n# view the levels of the factor\nlevels(gender_factor)\n#&gt; [1] \"female\" \"male\"\n\n\n3.2.4 Binary Data\nBinary data is categorical data where the only values are 0 and 1. It is often used in situations where a “hit” - an animal getting trapped, a customer clicking a link, etc. - is a 1, and no hit is a 0. In R, binary data can be represented using logical vectors.\nThe class() function is used to confirm that the vector is of logical class, which is the R data type used to represent binary data.\n\n# Create a vector of binary data\nbinary_data &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE)\n\n# Check the class of the vector\nclass(binary_data)\n#&gt; [1] \"logical\"\n# Output: \"logical\"\n\n\n3.2.5 Ordinal Data\nOrdinal data is a type of categorical data where each value is assigned a level or rank. It is useful with binned data, but also in graphing to rearrange the order categories are drawn. In R, it is referred to as factors.\n\n# Creating an ordered factor\nmy_factor &lt;- factor(c(\"small\", \"medium\", \"large\"), ordered = TRUE)\n\n# Sorting the levels of the factor\nmy_factor &lt;- factor(my_factor, levels = c(\"small\", \"medium\", \"large\"))\n\nprint(my_factor)\n#&gt; [1] small  medium large \n#&gt; Levels: small &lt; medium &lt; large",
    "crumbs": [
      "Introduction to Data Science and R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R Objects And Variables</span>"
    ]
  },
  {
    "objectID": "r-objects-and-variables.html#data-distribution",
    "href": "r-objects-and-variables.html#data-distribution",
    "title": "3  R Objects And Variables",
    "section": "\n3.3 Data Distribution",
    "text": "3.3 Data Distribution\nData distribution in R refers to the pattern in which the values of a variable are spread across the range of the variable. In other words, it refers to how often every possible value occurs in a dataset. It is usually shown as a curved line on a graph, or a histogram.\n\n3.3.1 Normal Distribution\nNormal distribution is data where the mean equals the median, 2/3 of the data are within one standard deviation of the mean, 95% of the data are within two standard deviations, and 97% are within three. Many statistical analyses assume your data are normally distributed. However, many datasets - especially in nature - aren’t.\n\nlibrary(ggplot2)\nlibrary(plotly)\n#&gt; \n#&gt; Attaching package: 'plotly'\n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     last_plot\n#&gt; The following object is masked from 'package:stats':\n#&gt; \n#&gt;     filter\n#&gt; The following object is masked from 'package:graphics':\n#&gt; \n#&gt;     layout\n# Creating a dataset with normal distribution\nmy_val &lt;- rnorm(100000, mean = 0, sd = 1)\nvec &lt;- c(1:100000)\nmy_data &lt;- data.frame(vec, my_val)\n# Plotting the histogram\np &lt;- ggplot(my_data) + aes(x = my_val) +\n      geom_histogram(aes(y = ..density..), bins = 30L, \n                     fill = \"white\", colour = 1) +\n      theme_linedraw() + geom_density(lwd = 1, colour = 4, fill = 4, alpha = 0.25)\nggplotly(p)\n#&gt; Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `after_stat(density)` instead.\n#&gt; ℹ The deprecated feature was likely used in the ggplot2 package.\n#&gt;   Please report the issue at &lt;https://github.com/tidyverse/ggplot2/issues&gt;.\n\n\n\n\n\n\n3.3.2 Skewed Distribution\nSkewed distribution is data where the median does not equal the mean. A left-skewed distribution has a long tail on the left side of the graph, while a right-skewed distribution has a long tail to the right. It is named after the tail and not the peak of the graph, as values in that tail occur more often than would be expected with a normal distribution.\n\nlibrary(ggplot2)\nlibrary(plotly)\n# Creating a dataset with normal distribution\nmy_val &lt;- rexp(100000, rate = 0.5)\nvec &lt;- c(1:100000)\nmy_data &lt;- data.frame(vec, my_val)\n# Plotting the histogram\np &lt;- ggplot(my_data) + aes(x = my_val) +\n      geom_histogram(aes(y = ..density..), bins = 30L, \n                     fill = \"white\", colour = 1) +\n      theme_linedraw() + geom_density(lwd = 1, colour = 4, fill = 4, alpha = 0.25)\nggplotly(p)",
    "crumbs": [
      "Introduction to Data Science and R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R Objects And Variables</span>"
    ]
  }
]